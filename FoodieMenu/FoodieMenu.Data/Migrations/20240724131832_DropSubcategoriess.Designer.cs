// <auto-generated />
using FoodieMenu.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodieMenu.Data.Migrations
{
    [DbContext(typeof(FoodieContext))]
    [Migration("20240724131832_DropSubcategoriess")]
    partial class DropSubcategoriess
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.Property<int>("CategoriesCategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemsItemID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriesCategoryID", "ItemsItemID");

                    b.HasIndex("ItemsItemID");

                    b.ToTable("CategoryItem");
                });

            modelBuilder.Entity("FoodieMenu.Domain.Clients.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FoodieMenu.Domain.Menu.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MenuID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.HasIndex("MenuID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FoodieMenu.Domain.Menu.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("RestaurantID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemID");

                    b.HasIndex("RestaurantID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FoodieMenu.Domain.Menu.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RestaurantID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MenuID");

                    b.HasIndex("RestaurantID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("FoodieMenu.Domain.Restaurants.AddressRestaurant", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RestaurantID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AddressID");

                    b.HasIndex("RestaurantID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("FoodieMenu.Domain.Restaurants.Restaurant", b =>
                {
                    b.Property<int>("RestaurantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RestaurantID");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.HasOne("FoodieMenu.Domain.Menu.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodieMenu.Domain.Menu.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodieMenu.Domain.Menu.Category", b =>
                {
                    b.HasOne("FoodieMenu.Domain.Menu.Menu", null)
                        .WithMany("Categories")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodieMenu.Domain.Menu.Item", b =>
                {
                    b.HasOne("FoodieMenu.Domain.Restaurants.Restaurant", null)
                        .WithMany("Items")
                        .HasForeignKey("RestaurantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodieMenu.Domain.Menu.Menu", b =>
                {
                    b.HasOne("FoodieMenu.Domain.Restaurants.Restaurant", null)
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodieMenu.Domain.Restaurants.AddressRestaurant", b =>
                {
                    b.HasOne("FoodieMenu.Domain.Restaurants.Restaurant", null)
                        .WithMany("Address")
                        .HasForeignKey("RestaurantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodieMenu.Domain.Menu.Menu", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("FoodieMenu.Domain.Restaurants.Restaurant", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Items");

                    b.Navigation("Menus");
                });
#pragma warning restore 612, 618
        }
    }
}
